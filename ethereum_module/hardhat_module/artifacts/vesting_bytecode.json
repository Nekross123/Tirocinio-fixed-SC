{
  "bytecode": "60e06040526040516109593803806109598339818101604052810190610025919061013c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610095576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008c906101cb565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508167ffffffffffffffff1660a08167ffffffffffffffff1660c01b815250508067ffffffffffffffff1660c08167ffffffffffffffff1660c01b81525050505050610270565b60008151905061012181610242565b92915050565b60008151905061013681610259565b92915050565b60008060006060848603121561015157600080fd5b600061015f86828701610112565b935050602061017086828701610127565b925050604061018186828701610127565b9150509250925092565b6000610198601b836101eb565b91507f42656e6566696369617279206973207a65726f206164647265737300000000006000830152602082019050919050565b600060208201905081810360008301526101e48161018b565b9050919050565b600082825260208201905092915050565b60006102078261020e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b61024b816101fc565b811461025657600080fd5b50565b6102628161022e565b811461026d57600080fd5b50565b60805160601c60a05160c01c60c05160c01c61069d6102bc6000396000818161024e01526102bd0152600081816102090152818161026f01526102e80152600060e6015261069d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630a17b06b1461004657806386d1a69f14610076578063fbccedae14610080575b600080fd5b610060600480360381019061005b919061034f565b61009e565b60405161006d9190610416565b60405180910390f35b61007e6100be565b005b6100886101e9565b6040516100959190610416565b60405180910390f35b60006100b7600054476100b1919061044d565b83610205565b9050919050565b60006100c86101e9565b9050806000808282546100db919061044d565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1682604051610128906103e1565b60006040518083038185875af1925050503d8060008114610165576040519150601f19603f3d011682016040523d82523d6000602084013e61016a565b606091505b50509050806101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a5906103f6565b60405180910390fd5b7fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b826040516101dd9190610416565b60405180910390a15050565b600080546101f64261009e565b610200919061056c565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff168267ffffffffffffffff16101561024c5760009050610334565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061029891906104a3565b67ffffffffffffffff168267ffffffffffffffff1611156102bb57829050610334565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000008361031291906105a0565b67ffffffffffffffff16846103279190610512565b61033191906104e1565b90505b92915050565b60008135905061034981610650565b92915050565b60006020828403121561036157600080fd5b600061036f8482850161033a565b91505092915050565b6000610385600083610431565b9150600082019050919050565b600061039f60108361043c565b91507f5472616e73666572206661696c65642e000000000000000000000000000000006000830152602082019050919050565b6103db816105d4565b82525050565b60006103ec82610378565b9150819050919050565b6000602082019050818103600083015261040f81610392565b9050919050565b600060208201905061042b60008301846103d2565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610458826105d4565b9150610463836105d4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610498576104976105f2565b5b828201905092915050565b60006104ae826105de565b91506104b9836105de565b92508267ffffffffffffffff038211156104d6576104d56105f2565b5b828201905092915050565b60006104ec826105d4565b91506104f7836105d4565b92508261050757610506610621565b5b828204905092915050565b600061051d826105d4565b9150610528836105d4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610561576105606105f2565b5b828202905092915050565b6000610577826105d4565b9150610582836105d4565b925082821015610595576105946105f2565b5b828203905092915050565b60006105ab826105de565b91506105b6836105de565b9250828210156105c9576105c86105f2565b5b828203905092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610659816105de565b811461066457600080fd5b5056fea2646970667358221220a16a75c9d20892f8605e339147cd56920ad1f45ef25b19195b1dc4ca1d6768a364736f6c63430008000033",
  "bytecode_runtime": "",
  "source_code": "// SPDX-License-Identifier: MIT\n// adapted from OpenZeppelin Contracts finance/VestingWallet.sol\npragma solidity ^0.8.0;\n\ncontract Vesting{\n    event EtherReleased(uint256 amount);\n\n    uint256 private _released;\n    address private immutable _beneficiary;\n    uint64 private immutable _start;\n    uint64 private immutable _duration;\n\n    constructor(address beneficiaryAddress, uint64 startTimestamp, uint64 durationSeconds) payable {\n        require(beneficiaryAddress != address(0), \"Beneficiary is zero address\");\n        _beneficiary = beneficiaryAddress;\n        _start = startTimestamp;\n        _duration = durationSeconds;\n    }\n\n    function release() public virtual {\n        uint256 amount = releasable();\n        _released += amount;\n        (bool success, ) = payable(_beneficiary).call{value: amount}(\"\");\n        require(success, \"Transfer failed.\");\n        emit EtherReleased(amount);\n\n    }\n\n    function releasable() public view virtual returns (uint256) {\n        return vestedAmount(uint64(block.timestamp)) - _released;\n    }\n\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(address(this).balance + _released, timestamp);\n    }\n\n    /**\n     * implementation of the vesting formula (linear curve).\n     */\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view returns (uint256) {\n        if (timestamp < _start) {\n            return 0;\n        } else if (timestamp > _start + _duration) {\n            return totalAllocation;\n        } else {\n            return (totalAllocation * (timestamp - _start)) / _duration;\n        }\n    }\n}"
}